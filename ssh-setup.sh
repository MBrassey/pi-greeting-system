#!/bin/bash

# SSH Setup Script for Raspberry Pi Facial Recognition System
# Configures secure SSH access with key-based authentication only

set -e  # Exit on any error

# Configuration
ENGINEER_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCrNr+t1LzMiyAtt0Lpr/EIB6jiddZltnH9DZ5mv+SrkKjwBVvmzFbjUjjzwoGD/RGEsorj7bEa29GkVrmXXHKFIcK6+IijUUMp2DbBJTp8rWy3XLcm3Ta6iTemqUvmhHQYImxQSEGqXeN0v2uwF0gfU81q/cueh6BfjNctwwNrzG9//ybdH1M4K+bw4cHJpgef/TXdU4q4F+khws9JMDI4eSRaoJVe9PEHkOOJ7QAzqW3kqe1Wql2u5y43kJpnS4TIDC8ketzxwo1Ts7u3CyYfe+Z2Z68Jfl+5kH6kkrSIAfFzrF6arrlqe9sv1PUtrE3AAGXBVjfK9rBKo6iAl1LnCz+rU3dUbVLH6F640ww71kX9vquoFvU0RFXHuJSBWGjeAZsFoPuOfLVdxZJ1Q3CAGNVjBkAzEaANI7oJPNBMrMtoJD3P/gsfARBsK99uWnjeoCLYvNOdJyHWyh92/6BdsVEdzdQBf6CkQvTQVyHS/YjJ2oLUNwfqBRUa3HZEuis= matt@brassey.io"
ENGINEER_USER="matt"
SSH_CONFIG="/etc/ssh/sshd_config"
SSH_CONFIG_BACKUP="/etc/ssh/sshd_config.backup"

echo "=== SSH Security Setup ==="
echo "Configuring SSH access for engineer: matt@brassey.io"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "Error: This script must be run as root (use sudo)"
    exit 1
fi

# Fix any broken package installations first
echo "Fixing package system..."
dpkg --configure -a
apt-get update --fix-missing
apt-get install -f -y

# Clean package cache and fix any issues
echo "Cleaning package cache..."
apt-get clean
apt-get autoclean

# Update system packages
echo "Updating system packages..."
apt-get update
apt-get upgrade -y

# Install OpenSSH server
echo "Installing OpenSSH server..."
apt-get install -y openssh-server

# Enable SSH service
echo "Enabling SSH service..."
systemctl enable ssh
systemctl start ssh

# Create engineer user if doesn't exist
if ! id "$ENGINEER_USER" &>/dev/null; then
    echo "Creating user: $ENGINEER_USER"
    useradd -m -s /bin/bash "$ENGINEER_USER"
    usermod -aG sudo "$ENGINEER_USER"
else
    echo "User $ENGINEER_USER already exists"
fi

# Set up SSH directory and authorized_keys
echo "Setting up SSH keys for $ENGINEER_USER..."
SSH_DIR="/home/$ENGINEER_USER/.ssh"
mkdir -p "$SSH_DIR"
chmod 700 "$SSH_DIR"

# Add engineer's public key
echo "$ENGINEER_KEY" > "$SSH_DIR/authorized_keys"
chmod 600 "$SSH_DIR/authorized_keys"
chown -R "$ENGINEER_USER:$ENGINEER_USER" "$SSH_DIR"

# Backup original SSH config
if [ ! -f "$SSH_CONFIG_BACKUP" ]; then
    echo "Backing up original SSH configuration..."
    cp "$SSH_CONFIG" "$SSH_CONFIG_BACKUP"
fi

# Configure SSH for security
echo "Configuring SSH security settings..."
cat > "$SSH_CONFIG" << EOF
# SSH Configuration for Raspberry Pi Facial Recognition System
# Generated by ssh-setup.sh on $(date)

# Network settings
Port 22
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::

# Protocol settings
Protocol 2

# Host keys
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and algorithms
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512

# Authentication settings
PasswordAuthentication no
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
PermitRootLogin no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Connection settings
LoginGraceTime 30
MaxAuthTries 3
MaxSessions 10
ClientAliveInterval 300
ClientAliveCountMax 2

# User restrictions
AllowUsers $ENGINEER_USER
DenyUsers root

# Disable unused features
X11Forwarding no
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
Compression delayed
UseDNS no
PermitTunnel no
GatewayPorts no
PermitUserEnvironment no

# Logging
SyslogFacility AUTH
LogLevel INFO

# Subsystem
Subsystem sftp /usr/lib/openssh/sftp-server

# Banner
Banner /etc/ssh/banner
EOF

# Create SSH banner
echo "Creating SSH banner..."
cat > /etc/ssh/banner << 'EOF'
================================================================================
          RASPBERRY PI FACIAL RECOGNITION SYSTEM
================================================================================

AUTHORIZED ACCESS ONLY

This system is for authorized personnel only. All connections are logged
and monitored. Unauthorized access is prohibited and will be prosecuted
to the full extent of the law.

System: Raspberry Pi Facial Recognition & Greeting System
Access: Key-based authentication only
Contact: System Administrator

================================================================================
EOF

# Generate new host keys if needed
echo "Generating SSH host keys..."
ssh-keygen -A

# Set proper permissions
chmod 644 /etc/ssh/banner
chmod 600 /etc/ssh/ssh_host_*_key
chmod 644 /etc/ssh/ssh_host_*_key.pub

# Configure firewall if ufw is available
if command -v ufw &> /dev/null; then
    echo "Configuring firewall..."
    ufw allow ssh
    ufw --force enable
fi

# Test SSH configuration
echo "Testing SSH configuration..."
if sshd -t; then
    echo "SSH configuration is valid"
else
    echo "Error: SSH configuration is invalid"
    echo "Restoring backup configuration..."
    cp "$SSH_CONFIG_BACKUP" "$SSH_CONFIG"
    systemctl restart ssh
    exit 1
fi

# Restart SSH service with new configuration
echo "Restarting SSH service..."
systemctl restart ssh

# Display connection information
echo ""
echo "=== SSH Setup Complete ==="
echo "SSH service is now configured and running"
echo ""
echo "Connection details:"
echo "  Host: $(hostname -I | awk '{print $1}')"
echo "  Port: 22"
echo "  User: $ENGINEER_USER"
echo "  Auth: Key-based only"
echo ""
echo "Engineer can now connect using:"
echo "  ssh $ENGINEER_USER@$(hostname -I | awk '{print $1}')"
echo ""
echo "Security features enabled:"
echo "  - Password authentication disabled"
echo "  - Root login disabled"
echo "  - Key-based authentication only"
echo "  - Connection logging enabled"
echo "  - Modern encryption ciphers"
echo "  - User access restricted to: $ENGINEER_USER"
echo ""
echo "Configuration backup saved to: $SSH_CONFIG_BACKUP"
echo "SSH service status:"
systemctl status ssh --no-pager -l

echo ""
echo "Setup completed successfully!"
echo "Engineer can now connect securely via SSH." 